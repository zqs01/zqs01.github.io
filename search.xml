<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>交叉熵的具体计算过程</title>
      <link href="/2020/02/25/%E4%BA%A4%E5%8F%89%E7%86%B5%E7%9A%84%E5%85%B7%E4%BD%93%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/02/25/%E4%BA%A4%E5%8F%89%E7%86%B5%E7%9A%84%E5%85%B7%E4%BD%93%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>有些知识点原理是懂的，但是具体怎么用代码实现时，确时常有些模糊，多思考，多记录。</p><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p>在多分类问题中，损失函数一般为交叉熵(cross entropy)损失函数，对于样本点(x,y)，y是真实的标签，其取值只可能为标签集合。我们假设有K个标签值，且第i个样本预测为第k个标签值的概率为$p_{i,k}$，一共有N个样本，则该数据集的损失函数为：<br><a href="https://img-blog.csdnimg.cn/20200225165606118.png" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200225165606118.png" class="lazyload"></a></p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>给出以下例子：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y_true &#x3D; [&#39;1&#39;, &#39;4&#39;, &#39;5&#39;]  # 样本的真实标签</span><br><span class="line">y_pred &#x3D; [[0.1, 0.6, 0.3, 0, 0, 0, 0, 0, 0, 0],</span><br><span class="line">          [0, 0.3, 0.2, 0, 0.5, 0, 0, 0, 0, 0],</span><br><span class="line">          [0.6, 0.3, 0, 0, 0, 0.1, 0, 0, 0, 0]]  # 样本的预测概率</span><br><span class="line">labels &#x3D; [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;]  # 所有标签</span><br></pre></td></tr></table></figure></div><p>已知<code>y_true</code>,<code>y_pred</code>和<code>labels</code>，求分类的交叉熵。在这个例子中，一共有3个样本，标签为1,4,5，一共是10个标签，y_pred是对每个样本的所有标签的预测值。</p><p>接下来，我们会用sklearn库中的<code>log_loss()</code>来计算多分类问题中的交叉熵，同时利用上面的公式计算交叉熵，对比两者结果是否相同。</p><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> log_loss</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelBinarizer</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y_true = [<span class="string">'1'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]  <span class="comment"># 样本的真实标签</span></span><br><span class="line">y_pred = [[<span class="number">0.1</span>, <span class="number">0.6</span>, <span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.2</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          [<span class="number">0.6</span>, <span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]  <span class="comment"># 样本的预测概率</span></span><br><span class="line">labels = [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]  <span class="comment"># 所有标签</span></span><br><span class="line"></span><br><span class="line">sk_log_loss = log_loss(y_true=y_true, y_pred=y_pred, labels=labels)</span><br><span class="line">print(<span class="string">"sklearn loss is"</span>, sk_log_loss)</span><br><span class="line"></span><br><span class="line">lb = LabelBinarizer()</span><br><span class="line">lb.fit(labels)</span><br><span class="line">transformed_labels = lb.transform(y_true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = len(y_true)</span><br><span class="line">K = len(labels)</span><br><span class="line"></span><br><span class="line">eps = <span class="number">1e-15</span>  <span class="comment"># 设置一个精度</span></span><br><span class="line">Loss = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(K):</span><br><span class="line">        <span class="comment"># 控制预测概率在[eps, 1-eps]内，避免求对数时出现问题</span></span><br><span class="line">        <span class="keyword">if</span> y_pred[i][k] &lt; eps:</span><br><span class="line">            y_pred[i][k] = eps</span><br><span class="line">        <span class="keyword">if</span> y_pred[i][k] &gt; <span class="number">1</span>-eps:</span><br><span class="line">            y_pred[i][k] = <span class="number">1</span>-eps</span><br><span class="line">        Loss -= transformed_labels[i][k]*log(y_pred[i][k])  <span class="comment"># 交叉熵</span></span><br><span class="line">Loss /= N</span><br><span class="line">print(<span class="string">"equation Loss is"</span>, Loss)</span><br></pre></td></tr></table></figure></div><p>输出结果如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sklearn loss <span class="keyword">is</span> <span class="number">1.1688526324400008</span></span><br><span class="line">equation Loss <span class="keyword">is</span> <span class="number">1.1688526324399937</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>可以看出，用上述公式计算出来的交叉熵和sklearn库中封装好的交叉熵计算结果一致。</p><p>需要注意的是，<code>math</code>库中的<code>log()</code>函数，<code>log()</code>函数默认的底数是<code>e</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断二叉树是否为对称二叉树</title>
      <link href="/2020/02/22/%E5%88%A4%E6%96%AD%E4%BA%8C%E5%8F%89%E6%A0%91%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/02/22/%E5%88%A4%E6%96%AD%E4%BA%8C%E5%8F%89%E6%A0%91%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>判断二叉树是否为对称二叉树</p><h2 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h2><p>如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。关于镜像二叉树可以参考这篇博客<a href="https://blog.csdn.net/ZHUQIUSHI123/article/details/104171723" target="_blank" rel="noopener">Python二叉树和二叉树的镜像</a>。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>关于二叉树的很多问题，都是用递归的思想来解决的。</p><ol><li>首先判断根结点是否存在，不存在则返回true；</li><li>根结点存在，左子树或者右子树不存在一定不是对称二叉树，返回false；</li><li>根结点、左子树和右子树均存在，则要判断左子树的左节点和右子树的右节点是否相同，一步一步递归，当全部满足条件时，即为对称二叉树。<h2 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">判断二叉树</span></span><br><span class="line"><span class="string">        E</span></span><br><span class="line"><span class="string">     /    \</span></span><br><span class="line"><span class="string">    A      D</span></span><br><span class="line"><span class="string">   / \      \</span></span><br><span class="line"><span class="string">  B   C      F</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">判断二叉树</span></span><br><span class="line"><span class="string">        E</span></span><br><span class="line"><span class="string">     /    \</span></span><br><span class="line"><span class="string">    A      A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetrical</span><span class="params">(self, pRoot)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">is_same</span><span class="params">(p1, p2)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> p1 <span class="keyword">and</span> <span class="keyword">not</span> p2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> (p1 <span class="keyword">and</span> p2) <span class="keyword">and</span> p1.val == p2.val:</span><br><span class="line">                <span class="keyword">return</span> is_same(p1.left, p2.right) <span class="keyword">and</span> is_same(p1.right, p2.left)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> pRoot.left <span class="keyword">and</span> <span class="keyword">not</span> pRoot.right:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> pRoot.right <span class="keyword">and</span> <span class="keyword">not</span> pRoot.left:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> is_same(pRoot.left, pRoot.right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = TreeNode(<span class="string">"A"</span>)</span><br><span class="line">    b = TreeNode(<span class="string">"B"</span>)</span><br><span class="line">    c = TreeNode(<span class="string">"C"</span>)</span><br><span class="line">    d = TreeNode(<span class="string">"D"</span>)</span><br><span class="line">    e = TreeNode(<span class="string">"E"</span>)</span><br><span class="line">    f = TreeNode(<span class="string">"F"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># e.left = a</span></span><br><span class="line">    <span class="comment"># e.right = d</span></span><br><span class="line">    <span class="comment"># a.left = b</span></span><br><span class="line">    <span class="comment"># a.right = c</span></span><br><span class="line">    <span class="comment"># d.right = f</span></span><br><span class="line">    <span class="comment"># root = e</span></span><br><span class="line">    <span class="comment"># s = Solution()</span></span><br><span class="line">    <span class="comment"># result = s.isSymmetrical(root)</span></span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line">    e.left = a</span><br><span class="line">    e.right = a</span><br><span class="line">    root = e</span><br><span class="line">    s = Solution()</span><br><span class="line">    result = s.isSymmetrical(root)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python重建二叉树</title>
      <link href="/2020/02/05/Python%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/02/05/Python%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><h2 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h2><p>根据中序遍历和前序遍历可以确定二叉树，具体过程为：</p><ol><li>根据前序序列第一个结点确定根结点</li><li>根据根结点在中序序列中的位置分割出左右两个子序列</li><li>对左子树和右子树分别递归使用同样的方法继续分解</li></ol><p>例如：<br>前序序列{1,2,4,7,3,5,6,8} = pre<br>中序序列{4,7,2,1,5,3,8,6} = int</p><ol><li>根据当前前序序列的第一个结点确定根结点，为 1</li><li>找到 1 在中序遍历序列中的位置，为 in[3]</li><li>切割左右子树，则 in[3] 前面的为左子树， in[3] 后面的为右子树</li><li>则切割后的左子树前序序列为：{2,4,7}，切割后的左子树中序序列为：{4,7,2}；切割后的右子树前序序列为：{3,5,6,8}，切割后的右子树中序序列为：{5,3,8,6}</li><li>对子树分别使用同样的方法分解<h2 id="3-python代码实现"><a href="#3-python代码实现" class="headerlink" title="3. python代码实现"></a>3. python代码实现</h2></li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preTraverse</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    前序遍历</span></span><br><span class="line"><span class="string">    :param root:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(root.val, end=<span class="string">' '</span>)</span><br><span class="line">    preTraverse(root.left)</span><br><span class="line">    preTraverse(root.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">midTraverse</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    中序遍历</span></span><br><span class="line"><span class="string">    :param root:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    midTraverse(root.left)</span><br><span class="line">    print(root.val, end=<span class="string">' '</span>)</span><br><span class="line">    midTraverse(root.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">afterTraverse</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    后序遍历</span></span><br><span class="line"><span class="string">    :param root:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    afterTraverse(root.left)</span><br><span class="line">    afterTraverse(root.right)</span><br><span class="line">    print(root.val, end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstructbinarytree</span><span class="params">(self, pre, tin)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pre <span class="keyword">or</span> <span class="keyword">not</span> tin:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        root = TreeNode(pre.pop(<span class="number">0</span>))</span><br><span class="line">        index = tin.index(root.val)  <span class="comment"># 找出根结点在中序遍历中的位置</span></span><br><span class="line">        root.left = self.reconstructbinarytree(pre, tin[: index])</span><br><span class="line">        root.right = self.reconstructbinarytree(pre, tin[index+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pre = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">    tin = [<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="comment"># pre = ['E', 'A', 'C', 'B', 'D', 'G', 'F']</span></span><br><span class="line">    <span class="comment"># tin = ['A', 'B', 'C', 'D', 'E', 'G', 'F']</span></span><br><span class="line">    s = Solution()</span><br><span class="line">    root = s.reconstructbinarytree(pre, tin)  <span class="comment"># 重建的树</span></span><br><span class="line">    <span class="comment"># 检验一下重建的树前序遍历、中序遍历和后序遍历是否正确</span></span><br><span class="line">    print(<span class="string">"前序遍历"</span>)</span><br><span class="line">    preTraverse(root)</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    print(<span class="string">"中序遍历"</span>)</span><br><span class="line">    midTraverse(root)</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    print(<span class="string">"后序遍历"</span>)</span><br><span class="line">    afterTraverse(root)</span><br></pre></td></tr></table></figure></div><p>输出结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">前序遍历</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line"></span><br><span class="line">中序遍历</span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">8</span> <span class="number">6</span> </span><br><span class="line"></span><br><span class="line">后序遍历</span><br><span class="line"><span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">8</span> <span class="number">6</span> <span class="number">3</span> <span class="number">1</span> </span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>同样的，可以验证一下之前博客中常用的那个二叉树是否能重建<a href="https://blog.csdn.net/ZHUQIUSHI123/article/details/104157544" target="_blank" rel="noopener">Python二叉树实现和遍历</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">以此二叉树为例</span><br><span class="line">       E</span><br><span class="line">     &#x2F;    \</span><br><span class="line">    A      G</span><br><span class="line">     \       \</span><br><span class="line">      C       F</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   B    D</span><br></pre></td></tr></table></figure></div><p>前序遍历结果：EACBDGF<br>中序遍历结果：ABCDEGF<br>后序遍历结果：BDCAFGE<br>层次遍历结果：EAGCFBD</p>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python二叉树和二叉树的镜像</title>
      <link href="/2020/02/04/python%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
      <url>/2020/02/04/python%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><h2 id="2-输入描述"><a href="#2-输入描述" class="headerlink" title="2. 输入描述"></a>2. 输入描述</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">二叉树的镜像定义：源二叉树 </span><br><span class="line">        8</span><br><span class="line">       &#x2F;  \</span><br><span class="line">      6   10</span><br><span class="line">     &#x2F; \  &#x2F; \</span><br><span class="line">    5  7 9  11</span><br><span class="line">    镜像二叉树</span><br><span class="line">        8</span><br><span class="line">       &#x2F;  \</span><br><span class="line">      10   6</span><br><span class="line">     &#x2F; \  &#x2F; \</span><br><span class="line">    11 9 7   5</span><br></pre></td></tr></table></figure></div><h2 id="3-思路"><a href="#3-思路" class="headerlink" title="3. 思路"></a>3. 思路</h2><p>先前序遍历这棵树的每个结点，如果遍历到的结点有子结点，就交换它的两个子节点，当交换完所有的非叶子结点的左右子结点之后，就得到了树的镜像。</p><p>本程序实现以下二叉树的镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">本程序实现以下二叉树的镜像：</span><br><span class="line">        E</span><br><span class="line">       &#x2F;  \</span><br><span class="line">      A    G</span><br><span class="line">       \    \</span><br><span class="line">       C     F</span><br><span class="line">      &#x2F;  \</span><br><span class="line">     B    D</span><br><span class="line">镜像二叉树应该为：</span><br><span class="line">        E</span><br><span class="line">       &#x2F;  \</span><br><span class="line">      G    A</span><br><span class="line">     &#x2F;    &#x2F;</span><br><span class="line">    F     C</span><br><span class="line">         &#x2F; \</span><br><span class="line">        D   B</span><br></pre></td></tr></table></figure></div><h2 id="4-Python程序代码如下："><a href="#4-Python程序代码如下：" class="headerlink" title="4.Python程序代码如下："></a>4.Python程序代码如下：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前序遍历，观察输出结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preTravese</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    print(root.val, end=<span class="string">' '</span>)</span><br><span class="line">    preTravese(root.left)</span><br><span class="line">    preTravese(root.right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现树的镜像</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mirror</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            root.left, root.right = root.right, root.left  <span class="comment"># 左右结点交换</span></span><br><span class="line">            self.mirror(root.left)</span><br><span class="line">            self.mirror(root.right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 初始化结点</span></span><br><span class="line">    a = TreeNode(<span class="string">"A"</span>)</span><br><span class="line">    b = TreeNode(<span class="string">"B"</span>)</span><br><span class="line">    c = TreeNode(<span class="string">"C"</span>)</span><br><span class="line">    d = TreeNode(<span class="string">"D"</span>)</span><br><span class="line">    e = TreeNode(<span class="string">"E"</span>)</span><br><span class="line">    f = TreeNode(<span class="string">"F"</span>)</span><br><span class="line">    g = TreeNode(<span class="string">"G"</span>)</span><br><span class="line">    <span class="comment"># 结点之间的关系</span></span><br><span class="line">    e.left = a</span><br><span class="line">    e.right = g</span><br><span class="line">    a.right = c</span><br><span class="line">    c.left = b</span><br><span class="line">    c.right = d</span><br><span class="line">    g.right = f</span><br><span class="line">    <span class="comment"># 根结点</span></span><br><span class="line">    root = e</span><br><span class="line">    print(<span class="string">"原来的树:"</span>)</span><br><span class="line">    preTravese(root)</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    print(<span class="string">"镜像树:"</span>)</span><br><span class="line">    preTravese(s.mirror(root))</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">原来的树:</span><br><span class="line">E A C B D G F </span><br><span class="line"></span><br><span class="line">镜像树:</span><br><span class="line">E G F A C D B </span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的深度</title>
      <link href="/2020/02/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
      <url>/2020/02/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>题目描述<br>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">二叉树</span></span><br><span class="line"><span class="string">        E</span></span><br><span class="line"><span class="string">     /    \</span></span><br><span class="line"><span class="string">    A      G</span></span><br><span class="line"><span class="string">     \      \</span></span><br><span class="line"><span class="string">     C       F</span></span><br><span class="line"><span class="string">   /  \</span></span><br><span class="line"><span class="string">  B    D</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">    dq = deque()</span><br><span class="line">    layer = <span class="number">1</span></span><br><span class="line">    dq.append((root, layer))</span><br><span class="line">    <span class="keyword">while</span> dq:</span><br><span class="line">        node, layer = dq.popleft()</span><br><span class="line">        deep = layer</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            dq.append((node.left, layer+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            dq.append((node.right, layer+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> deep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TreeDepth</span><span class="params">(self, pRoot)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> depth(pRoot)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 初始化结点</span></span><br><span class="line">    a = TreeNode(<span class="string">"A"</span>)</span><br><span class="line">    b = TreeNode(<span class="string">"B"</span>)</span><br><span class="line">    c = TreeNode(<span class="string">"C"</span>)</span><br><span class="line">    d = TreeNode(<span class="string">"D"</span>)</span><br><span class="line">    e = TreeNode(<span class="string">"E"</span>)</span><br><span class="line">    f = TreeNode(<span class="string">"F"</span>)</span><br><span class="line">    g = TreeNode(<span class="string">"G"</span>)</span><br><span class="line">    <span class="comment"># 结点之间的关系</span></span><br><span class="line">    e.left = a</span><br><span class="line">    e.right = g</span><br><span class="line">    a.right = c</span><br><span class="line">    c.left = b</span><br><span class="line">    c.right = d</span><br><span class="line">    g.right = f</span><br><span class="line">    <span class="comment"># 根结点</span></span><br><span class="line">    root = e</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.TreeDepth(root))</span><br></pre></td></tr></table></figure></div><p>输出结果：4</p>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python二叉树实现和遍历</title>
      <link href="/2020/02/03/Python%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%92%8C%E9%81%8D%E5%8E%86/"/>
      <url>/2020/02/03/Python%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%92%8C%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-树的基本概念"><a href="#1-树的基本概念" class="headerlink" title="1. 树的基本概念"></a>1. 树的基本概念</h2><p>若一个结点有子树，那么该结点称为子树根的”双亲”，子树的根是该结点的”孩子”。有相同双亲的结点互为”兄弟”。一个结点的所有子树上的任何结点都是该结点的后裔。从根结点到某个结点的路径上的所有结点都是该结点的祖先。</p><p><strong>结点的度</strong>：结点拥有的子树的数目。<br><strong>叶子</strong>：度为零的结点。<br><strong>分支结点</strong>：度不为零的结点。<br><strong>树的度</strong>：树中结点的最大的度。</p><p><strong>层次</strong>：根结点的层次为1，其余结点的层次等于该结点的双亲结点的层次加1。<br>树的高度：树中结点的最大层次。<br><strong>无序树</strong>：如果树中结点的各子树之间的次序是不重要的，可以交换位置。<br><strong>有序树</strong>：如果树中结点的各子树之间的次序是重要的, 不可以交换位置。<br><strong>森林</strong>：0个或多个不相交的树组成。对森林加上一个根，森林即成为树；删去根，树即成为森林。</p><h2 id="2-二叉树"><a href="#2-二叉树" class="headerlink" title="2. 二叉树"></a>2. 二叉树</h2><p>二叉树（Binary Tree）是一种特殊的树型结构，它的特点是每个结点至多有两棵子树（即二叉树中不存在度大于2的结点），且二叉树的子树有左右之分，其次序不能任意颠倒（有序树）。</p><h3 id="2-1-二叉树的遍历顺序"><a href="#2-1-二叉树的遍历顺序" class="headerlink" title="2.1 二叉树的遍历顺序"></a>2.1 二叉树的遍历顺序</h3><p><strong>先序遍历</strong>的操作定义为：若二叉树为空，为空操作；否则（1）访问根节点；（2）先序遍历左子树；（3）先序遍历右子树。<br><strong>中序遍历</strong>的操作定义为：若二叉树为空，为空操作；否则（1）中序遍历左子树；（2）访问根结点；（3）中序遍历右子树。<br><strong>后序遍历</strong>的操作定义为：若二叉树为空，为空操作；否则（1）后序遍历左子树；（2）后序遍历右子树；（3）访问根结点。<br><strong>层序遍历</strong>的操作定义为：若二叉树为空，为空操作；否则从上到下、从左到右按层次进行访问。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">以此二叉树为例</span><br><span class="line">       E</span><br><span class="line">     &#x2F;    \</span><br><span class="line">    A      G</span><br><span class="line">     \       \</span><br><span class="line">      C       F</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   B    D</span><br></pre></td></tr></table></figure></div><p>前序遍历结果：EACBDGF<br>中序遍历结果：ABCDEGF<br>后序遍历结果：BDCAFGE<br>层次遍历结果：EAGCFBD</p><h3 id="2-2-二叉树的链式存储"><a href="#2-2-二叉树的链式存储" class="headerlink" title="2.2 二叉树的链式存储"></a>2.2 二叉树的链式存储</h3><p>将二叉树的结点定义为一个对象，结点之间通过类似链表的链接方式来连接。<br>结点定义：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, left=None, right=None)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left  <span class="comment"># 左子树</span></span><br><span class="line">        self.right = right  <span class="comment"># 右子树</span></span><br></pre></td></tr></table></figure></div><h2 id="3-完整的Python代码如下："><a href="#3-完整的Python代码如下：" class="headerlink" title="3.完整的Python代码如下："></a>3.完整的Python代码如下：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">实现一个二叉树， 并进行遍历</span></span><br><span class="line"><span class="string">        E</span></span><br><span class="line"><span class="string">     /    \</span></span><br><span class="line"><span class="string">    A      G</span></span><br><span class="line"><span class="string">     \      \</span></span><br><span class="line"><span class="string">     C       F</span></span><br><span class="line"><span class="string">   /  \</span></span><br><span class="line"><span class="string">  B    D</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, left=None, right=None)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left  <span class="comment"># 左子树</span></span><br><span class="line">        self.right = right  <span class="comment"># 右子树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preTraverse</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    前序遍历</span></span><br><span class="line"><span class="string">    :param root:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(root.value, end=<span class="string">' '</span>)</span><br><span class="line">    preTraverse(root.left)</span><br><span class="line">    preTraverse(root.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">midTraverse</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    中序遍历</span></span><br><span class="line"><span class="string">    :param root:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    midTraverse(root.left)</span><br><span class="line">    print(root.value, end=<span class="string">' '</span>)</span><br><span class="line">    midTraverse(root.right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">afterTraverse</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    后序遍历</span></span><br><span class="line"><span class="string">    :param root:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    afterTraverse(root.left)</span><br><span class="line">    afterTraverse(root.right)</span><br><span class="line">    print(root.value, end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelTravel</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    层次遍历，使用队列实现</span></span><br><span class="line"><span class="string">    :param root:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append(root)  <span class="comment"># 先把根添加到队列中</span></span><br><span class="line">    <span class="keyword">while</span> len(queue):  <span class="comment"># 队列不为空</span></span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        print(node.value, end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            queue.append(node.right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 初始化结点</span></span><br><span class="line">    a = Node(<span class="string">"A"</span>)</span><br><span class="line">    b = Node(<span class="string">"B"</span>)</span><br><span class="line">    c = Node(<span class="string">"C"</span>)</span><br><span class="line">    d = Node(<span class="string">"D"</span>)</span><br><span class="line">    e = Node(<span class="string">"E"</span>)</span><br><span class="line">    f = Node(<span class="string">"F"</span>)</span><br><span class="line">    g = Node(<span class="string">"G"</span>)</span><br><span class="line">    <span class="comment"># 结点之间的关系</span></span><br><span class="line">    e.left = a</span><br><span class="line">    e.right = g</span><br><span class="line">    a.right = c</span><br><span class="line">    c.left = b</span><br><span class="line">    c.right = d</span><br><span class="line">    g.right = f</span><br><span class="line">    <span class="comment"># 根结点</span></span><br><span class="line">    root = e</span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    print(<span class="string">"***前序遍历结果***"</span>)</span><br><span class="line">    preTraverse(root)</span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    print(<span class="string">"***中序遍历结果***"</span>)</span><br><span class="line">    midTraverse(root)</span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    print(<span class="string">"***后序遍历结果***"</span>)</span><br><span class="line">    afterTraverse(root)</span><br><span class="line">    <span class="comment"># 层次遍历</span></span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    print(<span class="string">"***层次遍历结果***"</span>)</span><br><span class="line">    levelTravel(root)</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">***前序遍历结果***</span><br><span class="line">E A C B D G F </span><br><span class="line"></span><br><span class="line">***中序遍历结果***</span><br><span class="line">A B C D E G F </span><br><span class="line"></span><br><span class="line">***后序遍历结果***</span><br><span class="line">B D C A F G E </span><br><span class="line"></span><br><span class="line">***层次遍历结果***</span><br><span class="line">E A G C F B D </span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[python队列]用链表实现队列</title>
      <link href="/2020/02/03/python%E9%98%9F%E5%88%97-%E7%94%A8%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2020/02/03/python%E9%98%9F%E5%88%97-%E7%94%A8%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>队列是一种先进先出的线性表<br><a href="https://img-blog.csdnimg.cn/20190628103309200.png" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20190628103309200.png" class="lazyload" title="在这里插入图片描述"></a><br>我们定义如下的链表来实现队列数据结构：</p><p><a href="https://img-blog.csdnimg.cn/20190628103427172.png" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20190628103427172.png" class="lazyload" title="在这里插入图片描述"></a><br>定义一个头结点，左边指向队列的开头，右边指向队列的末尾，这样就可以保证我们插入一个元素和取出一个元素都是O(1)的操作。</p><p>方法一，用链表实现程序如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个头结点，左边指向队列的开头，</span><br><span class="line"># 右边指向队列的末尾，保证我们插入一个元素和取出一个元素都是O(1)的操作</span><br><span class="line">class Head:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.left &#x3D; None</span><br><span class="line">        self.right &#x3D; None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Node:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value &#x3D; value</span><br><span class="line">        self.next &#x3D; None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Queue:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 初始化节点</span><br><span class="line">        self.head &#x3D; Head()</span><br><span class="line"></span><br><span class="line">    def enqueue(self, value):</span><br><span class="line">        # 插入元素，先新建一个结点</span><br><span class="line">        newnode &#x3D; Node(value)</span><br><span class="line">        p &#x3D; self.head</span><br><span class="line">        if p.right:</span><br><span class="line">            # 如果head结点的右边不为None</span><br><span class="line">            # 说明队列中已经有元素了</span><br><span class="line"></span><br><span class="line">            temp &#x3D; p.right</span><br><span class="line">            p.right &#x3D; newnode</span><br><span class="line">            temp.next &#x3D; newnode</span><br><span class="line">        else:</span><br><span class="line">            # 队列为空，插入第一个元素</span><br><span class="line">            p.right &#x3D; newnode</span><br><span class="line">            p.left &#x3D; newnode</span><br><span class="line"></span><br><span class="line">    def dequeue(self):</span><br><span class="line">        p &#x3D; self.head</span><br><span class="line">        if p.left and (p.left &#x3D;&#x3D; p.right):</span><br><span class="line">            # 这说明队列中已经有元素</span><br><span class="line">            # 但是这是最后一个元素</span><br><span class="line">            temp &#x3D; p.left</span><br><span class="line">            p.left &#x3D; p.right &#x3D; None</span><br><span class="line">            return temp.value</span><br><span class="line">        elif p.left and (p.left !&#x3D; p.right):</span><br><span class="line">            # 说明队列中有元素，而且不止一个</span><br><span class="line">            temp &#x3D; p.left</span><br><span class="line">            p.left &#x3D; temp.next</span><br><span class="line">            return temp.value</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            # 队列为空，抛出查询错误</span><br><span class="line">            raise LookupError(&#39;queue is empty&#39;)</span><br><span class="line"></span><br><span class="line">    def is_empty(self):</span><br><span class="line">        if self.head.left:</span><br><span class="line">            return False</span><br><span class="line">        else:</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">    def top(self):</span><br><span class="line">        # 查询目前队列中最早入队的元素</span><br><span class="line">        if self.head.left:</span><br><span class="line">            return self.head.left.value</span><br><span class="line">        else:</span><br><span class="line">            raise LookupError(&#39;queue is empty&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    queue &#x3D; Queue()</span><br><span class="line">    print(queue.is_empty())</span><br><span class="line">    queue.enqueue(1)</span><br><span class="line">    queue.enqueue(2)</span><br><span class="line">    queue.enqueue(3)</span><br><span class="line">    queue.enqueue(4)</span><br><span class="line">    queue.enqueue(5)</span><br><span class="line">    print(queue.is_empty())</span><br><span class="line">    print(queue.dequeue())</span><br><span class="line">    print(queue.dequeue())</span><br><span class="line">    </span><br><span class="line">    print(queue.top())</span><br></pre></td></tr></table></figure></div><p>方法二：Python内置函数实现。单纯地实现先入先出结构，使用Python内置函数更简单一些。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Queue:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.items &#x3D; []</span><br><span class="line"></span><br><span class="line">    def is_empty(self):</span><br><span class="line">        return len(self.items) &#x3D;&#x3D; 0</span><br><span class="line"></span><br><span class="line">    def enqueue(self, item):</span><br><span class="line">        self.items.insert(0, item)</span><br><span class="line"></span><br><span class="line">    def dequeue(self):</span><br><span class="line">        return self.items.pop()</span><br><span class="line"></span><br><span class="line">    def size(self):</span><br><span class="line">        return len(self.items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    q &#x3D; Queue()</span><br><span class="line">    q.enqueue(1)</span><br><span class="line">    q.enqueue(2)</span><br><span class="line">    q.enqueue(3)</span><br><span class="line">    q.enqueue(4)</span><br><span class="line">    print(q.items)</span><br><span class="line">    q.dequeue()</span><br><span class="line">    q.dequeue()</span><br><span class="line">    print(q.items)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[python字符串]替换空格</title>
      <link href="/2020/02/03/python%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>/2020/02/03/python%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>题目描述：</p><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><p>思路：<br>先把字符串转成list，然后对list遍历，如果s[i]=’  ‘则插入’%20’</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">class Solution:</span><br><span class="line">    # s 源字符串</span><br><span class="line">    def replaceSpace(self, s):</span><br><span class="line">        # write code here</span><br><span class="line">        s &#x3D; list(s)</span><br><span class="line">        l &#x3D; len(s)</span><br><span class="line">        for i in range(l):</span><br><span class="line">            if s[i]&#x3D;&#x3D;&#39; &#39;:</span><br><span class="line">                s[i]&#x3D;&#39;%20&#39;</span><br><span class="line">        return &#39;&#39;.join(s)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[python链表]输入两个链表，找出它们的第一个公共结点</title>
      <link href="/2020/02/03/python%E9%93%BE%E8%A1%A8-%E8%BE%93%E5%85%A5%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%EF%BC%8C%E6%89%BE%E5%87%BA%E5%AE%83%E4%BB%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E7%BB%93%E7%82%B9/"/>
      <url>/2020/02/03/python%E9%93%BE%E8%A1%A8-%E8%BE%93%E5%85%A5%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%EF%BC%8C%E6%89%BE%E5%87%BA%E5%AE%83%E4%BB%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>题目：输入两个链表，找出它们的第一个公共结点。</p><p>思路：用python解决的话，相对比较简单，把链表1中的值依次放到list1，然后依次遍历链表2，如果遍历到的值在list1中，说明找到了第一个公共结点，return即可。当然边界情况需要考虑。</p><p>python代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># class ListNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val &#x3D; x</span><br><span class="line">#         self.next &#x3D; None</span><br><span class="line">class Solution:</span><br><span class="line">    def FindFirstCommonNode(self, pHead1, pHead2):</span><br><span class="line">        # write code here</span><br><span class="line">        list1 &#x3D; []</span><br><span class="line">        list2 &#x3D; []</span><br><span class="line">        node1 &#x3D; pHead1</span><br><span class="line">        node2 &#x3D; pHead2</span><br><span class="line">        while node1:</span><br><span class="line">            list.append(node1.val)</span><br><span class="line">        while node2:</span><br><span class="line">            if node2.val in list1:</span><br><span class="line">                return node2</span><br><span class="line">            else:</span><br><span class="line">                node2 &#x3D; node2.next</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[python单链表]单链表的基础实现</title>
      <link href="/2020/02/03/python%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/02/03/python%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>单链表的Python实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"># 结点类</span><br><span class="line">class Node:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value &#x3D; value</span><br><span class="line">        self.next &#x3D; None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 单链表</span><br><span class="line">class SingleLinklist:</span><br><span class="line">    def __init__(self, node&#x3D;None):</span><br><span class="line">        # 头结点定义为私有变量</span><br><span class="line">        self._head &#x3D; node</span><br><span class="line"></span><br><span class="line">    def is_empty(self):</span><br><span class="line">        # 判断链表是否为空</span><br><span class="line">        if self._head is None:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    def length(self):</span><br><span class="line">        # 返回链表的长度</span><br><span class="line">        # cur游标，用来移动遍历结点</span><br><span class="line">        # count用来计数</span><br><span class="line">        cur &#x3D; self._head</span><br><span class="line">        count &#x3D; 0</span><br><span class="line">        while cur:</span><br><span class="line">            count +&#x3D; 1</span><br><span class="line">            cur &#x3D; cur.next</span><br><span class="line">        return count</span><br><span class="line"></span><br><span class="line">    def travel(self):</span><br><span class="line">        # 遍历输出整个链表</span><br><span class="line">        cur &#x3D; self._head</span><br><span class="line">        while cur:</span><br><span class="line">            print(cur.value, end&#x3D;&#39; &#39;)</span><br><span class="line">            cur &#x3D; cur.next</span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line">    def add(self, item):</span><br><span class="line">        # 头部添加一个结点</span><br><span class="line">        node &#x3D; Node(item)</span><br><span class="line">        if self._head is None:</span><br><span class="line">            self._head &#x3D; node</span><br><span class="line">        else:</span><br><span class="line">            node.next &#x3D; self._head</span><br><span class="line">            self._head &#x3D; node</span><br><span class="line"></span><br><span class="line">    def append(self, item):</span><br><span class="line">        # 尾部添加一个结点</span><br><span class="line">        node &#x3D; Node(item)</span><br><span class="line">        # 若链表为空，直接将该结点作为链表的第一个元素</span><br><span class="line">        if self._head is None:</span><br><span class="line">            self._head &#x3D; node</span><br><span class="line">        else:</span><br><span class="line">            cur &#x3D; self._head</span><br><span class="line">            while cur.next is not None:</span><br><span class="line">                cur &#x3D; cur.next</span><br><span class="line">            cur.next &#x3D; node</span><br><span class="line"></span><br><span class="line">    def insert(self, pos, item):</span><br><span class="line">        # 在指定位置pos添加结点</span><br><span class="line">        # 若指定位置pos为第一个元素之前，则执行头部插入</span><br><span class="line">        if pos &lt;&#x3D; 0:</span><br><span class="line">            self.add(item)</span><br><span class="line">        # 若指定位置超过链表尾部，则执行尾部插入</span><br><span class="line">        elif pos &gt; self.length():</span><br><span class="line">            self.append(item)</span><br><span class="line">        else:</span><br><span class="line">            pre &#x3D; self._head</span><br><span class="line">            count &#x3D; 0</span><br><span class="line">            node &#x3D; Node(item)</span><br><span class="line">            while count &lt; pos - 1:</span><br><span class="line">                count +&#x3D; 1</span><br><span class="line">                pre &#x3D; pre.next</span><br><span class="line"></span><br><span class="line">            node.next &#x3D; pre.next</span><br><span class="line">            pre.next &#x3D; node</span><br><span class="line"></span><br><span class="line">    def remove(self, item):</span><br><span class="line">        # 删除一个结点</span><br><span class="line">        # 若链表为空，则直接返回</span><br><span class="line">        if self.is_empty():</span><br><span class="line">            return</span><br><span class="line">        pre &#x3D; None</span><br><span class="line">        cur &#x3D; self._head</span><br><span class="line"></span><br><span class="line">        while cur:</span><br><span class="line">            # 若没有找到元素，继续按链表后移结点</span><br><span class="line">            if cur.value !&#x3D; item:</span><br><span class="line">                pre &#x3D; cur</span><br><span class="line">                cur &#x3D; cur.next</span><br><span class="line">            else:</span><br><span class="line">                # 若要删除的点为头结点</span><br><span class="line">                if cur &#x3D;&#x3D; self._head:</span><br><span class="line">                    self._head &#x3D; cur.next</span><br><span class="line">                    break</span><br><span class="line">                else:</span><br><span class="line">                    pre.next &#x3D; cur.next</span><br><span class="line">                    break</span><br><span class="line"></span><br><span class="line">    def search(self, item):</span><br><span class="line">        # 查找结点是否存在</span><br><span class="line">        cur &#x3D; self._head</span><br><span class="line">        while cur:</span><br><span class="line">            if cur.value &#x3D;&#x3D; item:</span><br><span class="line">                return True</span><br><span class="line">            else:</span><br><span class="line">                cur &#x3D; cur.next</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    slink &#x3D; SingleLinklist()</span><br><span class="line">    print(slink.is_empty())</span><br><span class="line">    print(slink.length())</span><br><span class="line">    slink.append(1)</span><br><span class="line">    slink.append(2)</span><br><span class="line">    slink.append(3)</span><br><span class="line">    slink.append(4)</span><br><span class="line">    slink.travel()</span><br><span class="line">    slink.insert(2, 9)</span><br><span class="line">    slink.travel()</span><br><span class="line">    slink.remove(1)</span><br><span class="line">    slink.travel()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别相关会议期刊、资料博客</title>
      <link href="/2020/01/29/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%9B%B8%E5%85%B3%E4%BC%9A%E8%AE%AE%E6%9C%9F%E5%88%8A%E3%80%81%E8%B5%84%E6%96%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/01/29/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%9B%B8%E5%85%B3%E4%BC%9A%E8%AE%AE%E6%9C%9F%E5%88%8A%E3%80%81%E8%B5%84%E6%96%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post">                                <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css">                                            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-f57960eb32.css">                        <div class="htmledit_views" id="content_views">                <h1><a name="t0"></a><strong>目录</strong></h1><p id="%E4%B8%80.%E4%BC%9A%E8%AE%AE-toc" style="margin-left:0px;"><a href="#%E4%B8%80.%E4%BC%9A%E8%AE%AE" rel="nofollow" target="_self">一.会议</a></p><p id="1.1%E5%9B%BD%E9%99%85%E6%9C%80%E9%A1%B6%E5%B0%96%E4%BC%9A%E8%AE%AE-toc" style="margin-left:40px;"><a href="#1.1%E5%9B%BD%E9%99%85%E6%9C%80%E9%A1%B6%E5%B0%96%E4%BC%9A%E8%AE%AE" rel="nofollow" target="_self">1.1国际最顶尖会议</a></p><p id="1.2%E5%85%B6%E4%BB%96-toc" style="margin-left:40px;"><a href="#1.2%E5%85%B6%E4%BB%96" rel="nofollow" target="_self">1.2其他</a></p><p id="%E4%BA%8C.%20%E6%9C%9F%E5%88%8A-toc" style="margin-left:0px;"><a href="#%E4%BA%8C.%20%E6%9C%9F%E5%88%8A" rel="nofollow" target="_self">二. 期刊</a></p><p id="2.1%E5%9B%BD%E5%86%85-toc" style="margin-left:40px;"><a href="#2.1%E5%9B%BD%E5%86%85" rel="nofollow" target="_self">2.1国内</a></p><p id="2.2%E5%9B%BD%E5%A4%96%EF%BC%9A-toc" style="margin-left:40px;"><a href="#2.2%E5%9B%BD%E5%A4%96%EF%BC%9A" rel="nofollow" target="_self">2.2国外：</a></p><p id="%E4%B8%89.%E5%9B%BD%E9%99%85%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E6%9C%BA%E6%9E%84-toc" style="margin-left:0px;"><a href="#%E4%B8%89.%E5%9B%BD%E9%99%85%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E6%9C%BA%E6%9E%84" rel="nofollow" target="_self">三.国际语音识别技术研究机构</a></p><p id="%E5%9B%9B.%E5%9B%BD%E9%99%85%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E8%AF%84%E6%B5%8B-toc" style="margin-left:0px;"><a href="#%E5%9B%9B.%E5%9B%BD%E9%99%85%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E8%AF%84%E6%B5%8B" rel="nofollow" target="_self">四.国际语音识别技术评测</a></p><p id="%E4%BA%94.%20%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7%E5%8C%85-toc" style="margin-left:0px;"><a href="#%E4%BA%94.%20%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7%E5%8C%85" rel="nofollow" target="_self">五. 语音识别技术工具包</a></p><p id="%E5%85%AD.%E4%B8%BB%E9%A1%B5%E5%92%8C%E5%8D%9A%E5%AE%A2-toc" style="margin-left:0px;"><a href="#%E5%85%AD.%E4%B8%BB%E9%A1%B5%E5%92%8C%E5%8D%9A%E5%AE%A2" rel="nofollow" target="_self">六.主页和博客</a></p><hr id="hr-toc"><p>转载自<a href="https://blog.csdn.net/tbl1234567/article/details/70173330" rel="nofollow" target="_blank">https://blog.csdn.net/tbl1234567/article/details/70173330</a></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<a href="https://blog.csdn.net/xiaoding133/article/details/8842945" rel="nofollow" target="_blank">https://blog.csdn.net/xiaoding133/article/details/8842945</a></p><h1 id="%E4%B8%80.%E4%BC%9A%E8%AE%AE"><a name="t1"></a>一.会议</h1><h2 id="1.1%E5%9B%BD%E9%99%85%E6%9C%80%E9%A1%B6%E5%B0%96%E4%BC%9A%E8%AE%AE"><a name="t2"></a>1.1国际最顶尖会议</h2><p><br>ICASSP：International Conference on Acoustics, Speech and Signal Processing&nbsp;每年一届，10月截稿，次年5月开会<br>ICSLP:International Conference on Semiconductor Laser and Photonics&nbsp;偶数年举办，4月截稿，9月开会<br>EuroSpeech:European Conference on Speech Communication and Technology&nbsp;奇数年举办，4月截稿，9月开会</p><h2 id="1.2%E5%85%B6%E4%BB%96"><a name="t3"></a>1.2其他</h2><p>ICSMC:Int l Conference on Systems, Man &amp; Cybernetics&nbsp;<br>NAECON:National Aerospace and Electronics Conference<br>ICTTA:International Conference on Telecommunication Technology and Applications&nbsp;<br>ISSPA: Information Sciences, Signal Processing and their Applications&nbsp;<br>ISPACS:International Symposium on Intelligent Signal Processing and Communications Systems&nbsp;<br>SBEC:Southern Biomedical Engineering Conference&nbsp;<br>ICAPR:International Conference on Advances in Pattern Recognition&nbsp;<br>ICOSP: International Conference on Signal Processing Proceedings<br>ICSLP: International Conference on Spoken Language Processing&nbsp;<br>ICICIC:International Conference on Innovative Computing, Information and Control&nbsp;<br>IEMBS:Institute of Electrical and Electronics Engineers<br>NLPKE: Natural Language Processing and Knowledge Engineering&nbsp;<br>IECON:Conference of the IEEE Industrial Electronics Society<br>ICCT:International Council on Clean Transportation<br>ASRU:Automatic Speech Recognition and Understanding&nbsp;<br>ISCAS:International Symposium on Circuits and Systems&nbsp;<br>ISPACS:International Symposium on Intelligent Signal Processing and Communications Systems&nbsp;<br>ICDSP:International Conference on Digital Signal Processing&nbsp;<br>SPAWC:signal processing advances in wireless communications<br>ICCSIT: International Conference on Computer Science and Information Technology<br>ICSE: International Conference on Software Engineering<br>ICIAS:International Conference on Intelligent and Advanced Systems&nbsp;<br>TENCON:Technical Environmental Consulting<br>ICFCC:International Conference on Future Computer and Communication&nbsp;<br>WCICA:World Congress on Intelligent Control and Automation&nbsp;<br>MMSP:international workshop on multimedia signal processing<br>IROS: Intelligent Robots and Systems&nbsp;<br>ICSDA: INTERNATIONAL COMBATIVES SELF DEFENSE ASSOCIATION&nbsp;<br>ICCCE:International Conference on Computer and Communication Engineering<br>其他的会议还有：ISPA，ASPAA，INDICO，NetCom等</p><h1 id="%E4%BA%8C.%20%E6%9C%9F%E5%88%8A"><a name="t4"></a>二. 期刊</h1><h2 id="2.1%E5%9B%BD%E5%86%85"><a name="t5"></a>2.1国内</h2><ul><li>声学学报</li>    <li>应用声学</li>    <li>声学工程</li>    <li>信号处理</li>    <li>电子学报</li></ul><h2 id="2.2%E5%9B%BD%E5%A4%96%EF%BC%9A"><a name="t6"></a>2.2国外：</h2><ul><li>IEEE Signal Processing Magazine (IF：2.655)，一年6期，是双月刊）</li>    <li>Computer Speech and Language (CSL)（IF：1.776）</li>    <li>Digital Signal Processing（IF: 0.889）</li>    <li>IEE Electronics Letters (IF：1.063）</li>    <li>IEEE Signal Processing Letters (SPL)---(IF: 0.722)</li>    <li>IEEE Transactions on Audio,&nbsp;Speech and Language Processing (IF:2.950)</li>    <li>IEEE Transactions on Circuits and Systems-II: Express Briefs (CAS-II)---(IF：0.922)</li>    <li>IEEE Transactions on Signal Processing (TSP)-- (IF：1.57)</li>    <li>IEEE Transactions on Circuits and Systems-I: Regular Papers (CAS-I)---(IF：1.139)</li>    <li>IET Signal Processing（IF：1.250）</li>    <li>Signal Processing (IF: 0.669)</li>    <li>Signal Processing: Image Communication (IF: 1.109)</li>    <li>Speech Communication(IF:1.585)其中IF为影响因子</li></ul><h1 id="%E4%B8%89.%E5%9B%BD%E9%99%85%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E6%9C%BA%E6%9E%84"><a name="t7"></a>三.国际<a href="http://lib.csdn.net/base/vras" rel="nofollow" target="_blank">语音识别</a>技术研究机构</h1><ul><li>AT&amp;T&nbsp;&nbsp;<a href="http://www.research.att.com/editions/201304_home.html" rel="nofollow" target="_blank">http://www.research.att.com/editions/201304_home.html</a></li>    <li>ATR&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.slt.atr.co.jp/index.html" rel="nofollow" target="_blank">http://www.slt.atr.co.jp/index.html</a></li>    <li>BBN&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.bbn.com/technology/speech_recognition/" rel="nofollow" target="_blank">http://www.bbn.com/technology/speech_recognition/</a></li>    <li>Cambridge University Engineering Department (CUED)&nbsp;<a href="http://mi.eng.cam.ac.uk/" rel="nofollow" target="_blank">http://mi.eng.cam.ac.uk/</a></li>    <li>Carnegie Mellon University (CMU)&nbsp;</li>    <li>HP Labs&nbsp;&nbsp;&nbsp;<a href="http://www.hpl.hp.com/" rel="nofollow" target="_blank">http://www.hpl.hp.com/</a></li>    <li>Columbia University&nbsp;</li>    <li>Centre for Speech Technology Research at Edinburgh University&nbsp;</li>    <li>ESAT - PSI Speech Group at K.U.Leuven&nbsp;</li>    <li>International Computer Science Institute (ICSI)&nbsp;</li>    <li>IBM Human Language Technologies&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.research.ibm.com/hlt/" rel="nofollow" target="_blank">http://www.research.ibm.com/hlt/</a></li>    <li>IDIAP Research Institute&nbsp;</li>    <li>INESC-ID Lisboa, Spoken Language Systems Lab&nbsp;</li>    <li>IRST&nbsp;</li>    <li>ISIP&nbsp;</li>    <li>Johns Hopkins University (CLSP)&nbsp;</li>    <li>Speech, Music and Hearing at KTH&nbsp;</li>    <li>LIMSI&nbsp;</li>    <li>Alcatel Lucent (Bell Labs)&nbsp;&nbsp;<a href="http://www.alcatel-lucent.com/wps/portal/BellLabs" rel="nofollow" target="_blank">http://www.alcatel-lucent.com/wps/portal/BellLabs</a></li>    <li>Microsoft&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://research.microsoft.com/en-us/groups/speech/" rel="nofollow" target="_blank">http://research.microsoft.com/en-us/groups/speech/</a></li>    <li>MIT Spoken Language Systems&nbsp;</li>    <li>Oregon Graduate Institute (OGI) Center for Spoken Language Understanding&nbsp;</li>    <li>Speech and Language Processing Laboratory at Rutgers University&nbsp;</li>    <li>RWTH Aachen&nbsp;</li>    <li>University of Colorado, Boulder (CLEAR)&nbsp;</li>    <li>University of Sheffield&nbsp;</li>    <li>SRI&nbsp;</li>    <li>Furui Laboratory, Tokyo Institute of Technology&nbsp;</li>    <li>University of Illinois at Urbana and Champaign&nbsp;</li>    <li>University of Washington&nbsp;</li>    <li>Universitaet Erlangen-Nürnberg</li>    <li>剑桥大学&nbsp;<a href="http://htk.eng.cam.ac.uk/" rel="nofollow" target="_blank">http://htk.eng.cam.ac.uk/</a></li>    <li>CMU大学&nbsp;<a href="http://www.speech.cs.cmu.edu/" rel="nofollow" target="_blank">http://www.speech.cs.cmu.edu/</a></li>    <li>张智星 语音识别，<a href="http://lib.csdn.net/base/machinelearning" rel="nofollow" target="_blank">机器学习</a>&nbsp;<a href="http://mirlab.org/jang/" rel="nofollow" target="_blank">http://mirlab.org/jang/</a></li>    <li>安徽科大讯飞&nbsp;<a href="http://www.iflytek.com/" rel="nofollow" target="_blank">http://www.iflytek.com/</a></li></ul><p id="%E5%9B%9B.%E5%9B%BD%E9%99%85%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E8%AF%84%E6%B5%8B">四.国际语音识别技术评测<br>&nbsp;</p><p>NIST Spoken Language Technology Evaluations Benchmark Tests<br>(<a href="http://www.nist.gov/speech/tests/index.htm" rel="nofollow" target="_blank">http://www.nist.gov/speech/tests/index.htm</a>)</p><h1 id="%E4%BA%94.%20%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7%E5%8C%85"><a name="t8"></a>五. 语音识别技术工具包</h1><p><br>&nbsp;AT&amp;T FSM Library<br>&nbsp;CMU-Cambridge Statistical LM Toolkit<br>&nbsp;CMU Sphinx<br>&nbsp;CSLU toolkit<br>&nbsp;CUED HTK<br>&nbsp;Edinburgh Speech Tools Library<br>&nbsp;KTH WaveSurfer<br>&nbsp;MSState ASR Toolkit<br>&nbsp;NIST Utility Software<br>&nbsp;SPRACHcore software package<br>&nbsp;SRI Language Modelling Toolkit<br>&nbsp;SoX -- Sound eXchange<br>&nbsp;Transcriber<br>&nbsp;UCL Speech Filing System<br>&nbsp;FBVIEW multi-channel audio file viewer</p><p>1.6语音识别网站及相关论坛</p><p><a href="http://www.voxforge.org/home/forums/message-boards/acoustic-model-discussions" rel="nofollow" target="_blank">http://www.voxforge.org/home/forums/message-boards/acoustic-model-discussions</a><br><a href="http://bbs.matwav.com/" rel="nofollow" target="_blank">http://bbs.matwav.com</a><br><a href="http://www.yuyinshibie.com/" rel="nofollow" target="_blank">http://www.yuyinshibie.com/</a><br><a href="http://www.ctiforum.com/voice.html" rel="nofollow" target="_blank">http://www.ctiforum.com/voice.html</a><br><a href="http://liceu.uab.es/~joaquim/phonetics/fon_anal_acus/herram_anal_acus.html" rel="nofollow" target="_blank">http://liceu.uab.es/~joaquim/phonetics/fon_anal_acus/herram_anal_acus.html</a><br><a href="http://www.phon.ucl.ac.uk/resource/scribe/" rel="nofollow" target="_blank">http://www.phon.ucl.ac.uk/resource/scribe/</a></p><h1 id="%E5%85%AD.%E4%B8%BB%E9%A1%B5%E5%92%8C%E5%8D%9A%E5%AE%A2"><a name="t9"></a>六.主页和博客</h1><p>&nbsp; &nbsp; &nbsp;1.bill &nbsp;xia 的博客：<a href="http://ibillxia.github.io/blog/categories/assp/" rel="nofollow" target="_blank">http://ibillxia.github.io/blog/categories/assp/ &nbsp;</a>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 这个大神的博客有<a href="http://lib.csdn.net/base/deeplearning" rel="nofollow" target="_blank">深度学习</a>的一些东西，有用。</p><p>&nbsp; &nbsp; &nbsp; 2.zouxy09的博客：<a href="http://blog.csdn.net/zouxy09/article/category/1218766" rel="nofollow" target="_blank">http://blog.csdn.net/zouxy09/article/category/1218766</a>&nbsp;&nbsp; zouxy09大神对深度学习和<a href="http://lib.csdn.net/base/machinelearning" rel="nofollow" target="_blank">机器学习</a>都有研究，博客质量很高的</p><p>&nbsp; &nbsp; &nbsp; 3.台湾张智星教授的主页：<a href="http://mirlab.org/jang/" rel="nofollow" target="_blank">http://mirlab.org/jang/</a>&nbsp; &nbsp; 里面有一个语音课：音频信号处理和识别</p><p>&nbsp; &nbsp; &nbsp; 4.cmu大学的语音组：<a href="http://www.speech.cs.cmu.edu/" rel="nofollow" target="_blank">http://www.speech.cs.cmu.edu/</a>&nbsp; &nbsp;里面有很多链接</p><p>&nbsp; &nbsp; &nbsp; 5. dan ellis教授的主页：&nbsp;&nbsp;<a href="http://www.ee.columbia.edu/~dpwe/" rel="nofollow" target="_blank">http://www.ee.columbia.edu/~dpwe/</a>&nbsp; &nbsp; 里面有很多工具箱</p><p>&nbsp; &nbsp; &nbsp; 6.dan povey大神的主页：<a href="http://www.danielpovey.com/index.html" rel="nofollow" target="_blank">http://www.danielpovey.com/index.html</a>&nbsp; kaldi的资料很多</p><p>&nbsp; &nbsp; &nbsp; 7.微软邓力老师的主页：<a href="http://research.microsoft.com/en-us/people/deng/" rel="nofollow" target="_blank">http://research.microsoft.com/en-us/people/deng/</a>&nbsp; 关于深度学习的语音识别资料</p><p>&nbsp; &nbsp; &nbsp; 8.王德江老师的主页：<a href="http://www.cse.ohio-state.edu/~dwang/pnl/software.html" rel="nofollow" target="_blank">http://www.cse.ohio-state.edu/~dwang/pnl/software.html</a>&nbsp;关于语音识别 语音分离，音乐分离</p><p>&nbsp; &nbsp; &nbsp; 9.国外大神SnippyHolloW的github主页：<a href="https://github.com/SnippyHolloW" rel="nofollow" target="_blank">https://github.com/SnippyHolloW</a></p><p>&nbsp; &nbsp; &nbsp;10.自然语言处理的论坛：<a href="http://www.threedweb.cn/portal.php" rel="nofollow" target="_blank">http://www.threedweb.cn/portal.php</a>&nbsp; &nbsp; 非常多的资源</p><p>&nbsp;</p><p><a href="http://lib.csdn.net/base/vras" rel="nofollow" target="_blank">语音识别与合成</a><br>Speech at Carnegie Mellon University<br>鼎鼎大名的CMU语音组。著名的Sphinx系统的诞生地，李开复当年作研究的地方&nbsp;<br><a href="http://fife.speech.cs.cmu.edu/" rel="nofollow" target="_blank">http://fife.speech.cs.cmu.edu/</a><br>The Center for Language and Speech Processing (CLSP) at The Johns Hopkins University<br>著名的Jelinek教授领导的语言与语音处理组&nbsp;<br><a href="http://www.clsp.jhu.edu/" rel="nofollow" target="_blank">http://www.clsp.jhu.edu/</a><br>Speech Research-----确是非常全的一个网站<br>国外比较全的一个语音技术研究的链接&nbsp;<br><a href="http://mambo.ucsc.edu/psl/speech.html" rel="nofollow" target="_blank">http://mambo.ucsc.edu/psl/speech.html</a><br>Signal Compression Lab, Department of Electrical and Computer Engineering<br>著名的Allen Gersho教授所在的实验室－University of California, Santa Babra。该实验室包括好几位杰出的教授，像K.Rose, V. Cuperman等等。该校非常令人尊敬的地方是从这里毕业的学生有很多后来都成为了学术科研上的佼佼者&nbsp;<br><a href="http://scl.ece.ucsb.edu/index.htm" rel="nofollow" target="_blank">http://scl.ece.ucsb.edu/index.htm</a><br>The Speech Recognition Group<br>Rutgers大学CAPI中心下的语音识别组。论文集Modern Methods of Speech Processing中的R.P. Ramachandran就是该中心的教授&nbsp;<br><a href="http://www.caip.rutgers.edu/ARPA-SLT" rel="nofollow" target="_blank">http://www.caip.rutgers.edu/ARPA-SLT</a><br>Speech Processing Laboratory at at Michigan State University<br>著名的Deller教授所领导的语音处理研究组&nbsp;<br><a href="http://www.egr.msu.edu/~deller/speechlab_people.html" rel="nofollow" target="_blank">http://www.egr.msu.edu/~deller/speechlab_people.html</a><br>Purdue University Speech and Language Processing Research Group<br>Purdue大学语音处理研究组&nbsp;<br><a href="http://wavelet.ecn.purdue.edu/~speechg" rel="nofollow" target="_blank">http://wavelet.ecn.purdue.edu/~speechg</a><br>还有一个比较有名的做语音的科研机构, 日本名古屋工业大学的Keiichi TOKUDA教授,<br>他们在基于参数的语音合成领域非常有名气的, 他们开发的HTS平台目前的应用也非常广泛.<br>对于研究语音合成和语音识别的人会有帮助.地址如下:<br><a href="http://www.sp.nitech.ac.jp/" rel="nofollow" target="_blank">http://www.sp.nitech.ac.jp/</a><br>HTS的主页为:<br><a href="http://hts.sp.nitech.ac.jp/" rel="nofollow" target="_blank">http://hts.sp.nitech.ac.jp/</a></p><p>语音识别工具箱：</p><p>&nbsp; &nbsp; 1.kaldi：<a href="http://kaldi.sourceforge.net/" rel="nofollow" target="_blank">http://kaldi.sourceforge.net/</a></p><p>&nbsp; &nbsp; 2.htk：<a href="http://htk.eng.cam.ac.uk/" rel="nofollow" target="_blank">http://htk.eng.cam.ac.uk/</a></p><p>&nbsp; &nbsp; 3.RWTH:<a href="http://www-i6.informatik.rwth-aachen.de/rwth-asr/" rel="nofollow" target="_blank">http://www-i6.informatik.rwth-aachen.de/rwth-asr/</a></p><p>&nbsp; &nbsp; 4.sphinx:<a href="http://cmusphinx.sourceforge.net/" rel="nofollow" target="_blank">http://cmusphinx.sourceforge.net/</a></p><p>&nbsp; &nbsp; 5.julius:<a href="http://julius.sourceforge.jp/en_index.php" rel="nofollow" target="_blank">http://julius.sourceforge.jp/en_index.php</a></p><p>说话人识别：</p><p>&nbsp; &nbsp;1.微软的开源库MSR Identity Toolkit v1.0：<a href="http://research.microsoft.com/apps/catalog/default.aspx?t=downloads" rel="nofollow" target="_blank">http://research.microsoft.com/en-us/downloads/a6262fec-03a7-4060-a08c-0b0d037a3f5b/</a></p><p>&nbsp; &nbsp;2.王德江老师的主页也有说话人识别的资料：<a href="http://www.cse.ohio-state.edu/~dwang/pnl/software.html" rel="nofollow" target="_blank">http://www.cse.ohio-state.edu/~dwang/pnl/software.html</a>&nbsp;</p>            </div>                      </div>]]></content>
      
      
      <categories>
          
          <category> ASR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR_blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>interspeech2019论文下载入口</title>
      <link href="/2020/01/29/interspeech2019%E8%AE%BA%E6%96%87%E4%B8%8B%E8%BD%BD%E5%85%A5%E5%8F%A3/"/>
      <url>/2020/01/29/interspeech2019%E8%AE%BA%E6%96%87%E4%B8%8B%E8%BD%BD%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.isca-speech.org/archive/Interspeech_2019/" target="_blank" rel="noopener">interspeech2019论文下载入口</a></p>]]></content>
      
      
      <categories>
          
          <category> ASR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interspeech2019 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云Ubuntu16.04搭建ftp文件服务器</title>
      <link href="/2020/01/29/%E8%85%BE%E8%AE%AF%E4%BA%91Ubuntu16-04%E6%90%AD%E5%BB%BAftp%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/01/29/%E8%85%BE%E8%AE%AF%E4%BA%91Ubuntu16-04%E6%90%AD%E5%BB%BAftp%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装VSFTPD"><a href="#1-安装VSFTPD" class="headerlink" title="1.安装VSFTPD"></a>1.安装VSFTPD</h2><p> 使用apt-get安装vsftpd:<br> <code>sudo apt-get install vsftpd -y</code><br> 启动VSFTPD<br> 安装完成后VSFTPD会自动启动，通过netstat命令可以看到系统已经监听了21端口:<br><code>sudo netstat -nltp | grep 21</code><br> 如果没有启动，可以手动开启VSFTPD服务:<br> <code>sudo systemctl start vsftpd.service</code></p><h2 id="2-配置用户访问目录"><a href="#2-配置用户访问目录" class="headerlink" title="2.配置用户访问目录"></a>2.配置用户访问目录</h2><p> 新建用户目录<br> <code>sudo mkdir /home/uftp</code><br> 执行完后，就可以在/home/uftp看到新建的文件夹uftp了。<br> 新建用户uftp并设置密码<br> 创建一个用户uftp：<br><code>sudo useradd -d /home/uftp -s /bin/bash uftp</code><br> 为用户uftp设置密码：<br><code>sudo passwd uftp</code><br> 删除掉 pam.d 中 vsftpd，因为该配置文件会导致使用用户名登陆ftp失败:<br> <code>sudo rm /etc/pam.d/vsftpd</code><br> 限制该用户仅能通过FTP访问<br> 限制用户uftp只能通过FTP访问服务器，而不能直接登陆服务器：<br><code>sudo usermod -s /sbin/nologin uftp</code><br>修改 vsftpd 配置<br> <code>sudo chmod a+w /etc/vsftpd.conf</code><br> 修改 /etc/vsftpd.conf 文件中的配置（将如下配置添加到配置文件最下方）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 限制用户对主目录以外目录访问</span><br><span class="line">chroot_local_user&#x3D;YES</span><br><span class="line"></span><br><span class="line"># 指定一个 userlist 存放允许访问 ftp 的用户列表</span><br><span class="line">userlist_deny&#x3D;NO</span><br><span class="line">userlist_enable&#x3D;YES</span><br><span class="line"></span><br><span class="line"># 记录允许访问 ftp 用户列表</span><br><span class="line">userlist_file&#x3D;&#x2F;etc&#x2F;vsftpd.user_list</span><br><span class="line"></span><br><span class="line"># 不配置可能导致莫名的530问题</span><br><span class="line">seccomp_sandbox&#x3D;NO</span><br><span class="line"></span><br><span class="line"># 允许文件上传</span><br><span class="line">write_enable&#x3D;YES</span><br><span class="line"></span><br><span class="line"># 使用utf8编码</span><br><span class="line">utf8_filesystem&#x3D;YES</span><br></pre></td></tr></table></figure></div><p>新建文件/etc/vsftpd.user_list, 用于存放允许访问ftp的用户：</p><p><code>sudo touch /etc/vsftpd.user_list</code><br><code>sudo chmod a+w /etc/vsftpd.user_list</code><br>修改/etc/vsftpd.user_list，加入刚刚创建的用户。</p><p> 设置访问权限<br> 设置主目录访问权限（只读）:<br> <code>sudo chmod a-w /home/uftp</code><br> 新建公共目录，并设置权限（读写）:<br> <code>sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public</code><br> 重启 vsftpd 服务:<br> <code>sudo systemctl restart vsftpd.service</code></p><h2 id="3-访问FTP服务"><a href="#3-访问FTP服务" class="headerlink" title="3.访问FTP服务"></a>3.访问FTP服务</h2><p> 通过Windows资源管理器访问<br> Windows用户可以复制下面的链接到资源管理器的地址栏访问：<br><code>ftp://uftp:你的密码@你的主机IP</code><br>登陆进去可以看到建立的public文件夹<br><a href="https://img-blog.csdnimg.cn/20190618212514380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20190618212514380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a></p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python提取mfcc特征</title>
      <link href="/2020/01/29/python%E6%8F%90%E5%8F%96mfcc%E7%89%B9%E5%BE%81/"/>
      <url>/2020/01/29/python%E6%8F%90%E5%8F%96mfcc%E7%89%B9%E5%BE%81/</url>
      
        <content type="html"><![CDATA[<p>理论部分请看：<a href="https://haythamfayek.com/2016/04/21/speech-processing-for-machine-learning.html" target="_blank" rel="noopener">https://haythamfayek.com/2016/04/21/speech-processing-for-machine-learning.html</a><br>这是我认为最完整的、讲解最清楚的python提取mfcc特征的教程。<br>用到的<code>OSR_us_000_0010_8k.wav</code>数据在这里下载：<br><a href="http://www.voiptroubleshooter.com/open_speech/american.html" target="_blank" rel="noopener">http://www.voiptroubleshooter.com/open_speech/american.html</a><br>完整Python代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import scipy.io.wavfile</span><br><span class="line">import matplotlib.pylab as plt</span><br><span class="line">sample_rate, signal &#x3D; scipy.io.wavfile.read(&quot;OSR_us_000_0010_8k.wav&quot;)</span><br><span class="line">signal &#x3D; signal[0: int(3.5*sample_rate)]</span><br><span class="line">t &#x3D; np.linspace(0, 3.5, num&#x3D;len(signal))</span><br><span class="line"></span><br><span class="line">pre_emphasis &#x3D; 0.97</span><br><span class="line">emphasized_signal &#x3D; np.append(signal[0], signal[1:] - pre_emphasis*signal[:-1])</span><br><span class="line">frame_size &#x3D; 0.025</span><br><span class="line">frame_stride &#x3D; 0.01</span><br><span class="line">frame_length, frame_step &#x3D; frame_size*sample_rate, frame_stride*sample_rate</span><br><span class="line">signal_length &#x3D; len(emphasized_signal)</span><br><span class="line">frame_length &#x3D; int(round(frame_length))</span><br><span class="line">num_frames &#x3D; int(np.ceil(float(np.abs(signal_length - frame_length)) &#x2F; frame_step))</span><br><span class="line">pad_signal_length &#x3D; num_frames * frame_step + frame_length</span><br><span class="line">z &#x3D; np.zeros(int(pad_signal_length - signal_length))</span><br><span class="line">pad_signal &#x3D; np.append(emphasized_signal, z)</span><br><span class="line">indices &#x3D; np.tile(np.arange(0, frame_length), (num_frames, 1)) + np.tile(np.arange(0, num_frames*frame_step, frame_step), (frame_length, 1)).T</span><br><span class="line">frames &#x3D; pad_signal[indices.astype(np.int32, copy&#x3D;False)]</span><br><span class="line">ham &#x3D; np.hamming(frame_length)</span><br><span class="line"># plt.plot(ham)</span><br><span class="line"># plt.show()</span><br><span class="line"></span><br><span class="line">frames *&#x3D; ham</span><br><span class="line"></span><br><span class="line">NFFT &#x3D; 512</span><br><span class="line">mag_frames &#x3D; np.absolute(np.fft.rfft(frames, NFFT))</span><br><span class="line">pow_frames &#x3D; ((1.0 &#x2F; NFFT) * ((mag_frames) ** 2))  #(348, 257)</span><br><span class="line"></span><br><span class="line">nfilt &#x3D; 40</span><br><span class="line">low_freq_mel &#x3D; 0</span><br><span class="line">high_freq_mel &#x3D; (2595 * np.log10(1 + (sample_rate&#x2F;2) &#x2F; 700))</span><br><span class="line"></span><br><span class="line">mel_points &#x3D; np.linspace(low_freq_mel, high_freq_mel, nfilt + 2)</span><br><span class="line"></span><br><span class="line">hz_points &#x3D; (700 * (10**(mel_points &#x2F; 2595) - 1))</span><br><span class="line"></span><br><span class="line">bin &#x3D; np.floor((NFFT + 1)*hz_points &#x2F; sample_rate)</span><br><span class="line">fbank &#x3D; np.zeros((nfilt, int(np.floor(NFFT &#x2F; 2 + 1))))</span><br><span class="line">for m in range(1, nfilt + 1):</span><br><span class="line">    f_m_minus &#x3D; int(bin[m-1])</span><br><span class="line">    f_m &#x3D; int(bin[m])</span><br><span class="line">    f_m_plus &#x3D; int(bin[m+1])</span><br><span class="line"></span><br><span class="line">    for k in range(f_m_minus, f_m):</span><br><span class="line">        fbank[m-1, k] &#x3D; (k-bin[m-1]) &#x2F; (bin[m]-bin[m - 1])</span><br><span class="line">    for k in range(f_m, f_m_plus):</span><br><span class="line">        fbank[m-1, k] &#x3D; (bin[m + 1] - k) &#x2F; (bin[m + 1] - bin[m])</span><br><span class="line"></span><br><span class="line">filter_banks &#x3D; np.dot(pow_frames, fbank.T)</span><br><span class="line">filter_banks &#x3D; np.where(filter_banks &#x3D;&#x3D; 0, np.finfo(float).eps, filter_banks)</span><br><span class="line">filter_banks &#x3D; 20 * np.log10(filter_banks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.imshow(np.flipud(filter_banks.T), cmap&#x3D;plt.cm.jet, aspect&#x3D;0.2, extent&#x3D;[0,filter_banks.shape[1],0,filter_banks.shape[0]],shape&#x3D;[11, 9])</span><br><span class="line">plt.axis(&quot;normal&quot;)</span><br><span class="line">plt.savefig(&#39;.&#x2F;test2.png&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></div><p>运行的结果如下：<br><a href="https://img-blog.csdnimg.cn/20190326162215524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20190326162215524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a></p>]]></content>
      
      
      <categories>
          
          <category> ASR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用阿里云搭建frp内网穿透，实现外网远程桌面连接内网</title>
      <link href="/2020/01/29/%E5%88%A9%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5%E5%86%85%E7%BD%91/"/>
      <url>/2020/01/29/%E5%88%A9%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5%E5%86%85%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-面临的问题"><a href="#1-面临的问题" class="headerlink" title="1. 面临的问题"></a>1. 面临的问题</h2><p>实验室有电脑A，但是在实验室内网环境中，外网无法直接远程桌面访问。现在我不常去实验室，但是还需要用到实验室电脑资源。</p><h2 id="2-其他解决办法"><a href="#2-其他解决办法" class="headerlink" title="2. 其他解决办法"></a>2. 其他解决办法</h2><p> 远程控制电脑的一些软件，像某葵软件，某viewer等，免费的没法长时间用，一是网速慢，容易卡顿；二是网络不顺畅，经常连接不上某viewer，据说是实验室已经关闭了某viewer的端口，体验很不爽。</p><h2 id="3-本文解决办法-内网穿透"><a href="#3-本文解决办法-内网穿透" class="headerlink" title="3. 本文解决办法-内网穿透"></a>3. 本文解决办法-内网穿透</h2><p>可以通过其他云服务器搭建一个frp服务，实现内网穿透，下面是具体的操作步骤。</p><p><strong>第一步</strong>，购买阿里云学生机，云翼计划，学生可以享受9.5元每月的优惠，我购买的是轻量应用服务器，轻量应用服务器有个好处，5M峰值带宽，1000G高速流量包，还是很给力的。<br><a href="https://img-blog.csdnimg.cn/20191130192904740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191130192904740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a><br><strong>第二步</strong>，服务器购买完成后，搭建云服务器，设置系统和登陆密码，系统选择Ubuntu16.04系统。配置完成后，使用远程登陆软件（xshell或其他软件）远程登陆，从GitHub上下载frp软件：<br><code>wget https://github.com/fatedier/frp/releases/download/v0.30.0/frp_0.30.0_linux_amd64.tar.gz</code></p><p>解压：<code>tar -zxvf frp_0.30.0_linux_amd64.tar.gz</code></p><p>下载的文件夹重命名为frp：<code>mv frp_0.30.0_linux_amd64 frp</code></p><p>配置文件夹中的<code>frps.ini</code>文件：<code>vim frps.ini</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">#服务器开放的端口</span><br><span class="line">bind_port &#x3D; 7000</span><br></pre></td></tr></table></figure></div><p>服务器端可以打开所有TCP和UDP端口，<br><a href="https://img-blog.csdnimg.cn/20191130193707733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191130193707733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a><br><a href="https://img-blog.csdnimg.cn/20191130193755398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191130193755398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a><br>在阿里云服务器上启动服务：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd frp</span><br><span class="line"></span><br><span class="line">nohup frp&#x2F;frps -c frp&#x2F;frps.ini</span><br></pre></td></tr></table></figure></div><p>至此，服务器已经配置完成。</p><p><strong>第三步</strong>，客户端配置（实验室电脑）：<br>软件下载地址：<code>https://github.com/fatedier/frp/releases/</code>，由于实验室电脑是Windows10系统，所以选择：<br><a href="https://img-blog.csdnimg.cn/20191130194448997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191130194448997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a><br>同样解压，文件夹更名为<code>frp</code>，然后配置<code>frpc.ini</code>文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; 你自己服务器端ip（公网ip）</span><br><span class="line">server_port &#x3D;  7000 #对应服务器配置中的端口</span><br><span class="line">  </span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 自己电脑的ip</span><br><span class="line">local_port &#x3D; 3389</span><br><span class="line">remote_port &#x3D; 3389</span><br></pre></td></tr></table></figure></div><p>实验室电脑客户端添加端口出站规则：将端口3389添加到出站规则中<br><a href="https://img-blog.csdnimg.cn/20191130194904890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191130194904890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a><br>在Dos下启动服务：<code>win + R</code>输入<code>cmd</code><br>需要先进入frp目录后再执行如下操作：<br><code>frpc -c frpc.ini</code><br>至此，实验室电脑配置完成，可以在外网电脑通过远程桌面连接内网电脑，远程桌面地址为：<code>阿里云服务器公网IP:3389</code></p><p>执行完以上所有步骤，应该能进行远程连接了。</p><p><strong>实验室电脑开机自动启动frpc服务</strong></p><p>阿里云服务器一般不会经常重启，但是自己实验室的电脑可能会经常重启，所有需要设置开机自动开启客户端frpc:</p><p><strong>第一步</strong>，下载winsw，<code>https://github.com/kohsuke/winsw/releases</code>更名为<code>winsw.exe</code>，放到frp相同的目录中，并在同一个目录中创建<code>winsw.xml</code>，内容是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;service&gt;</span><br><span class="line">    &lt;id&gt;frp&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;name&gt;frp这里是服务的名称&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;这里是服务的介绍，随便写&lt;&#x2F;description&gt;</span><br><span class="line">    &lt;executable&gt;frpc&lt;&#x2F;executable&gt;</span><br><span class="line">    &lt;arguments&gt;-c frpc.ini&lt;&#x2F;arguments&gt;</span><br><span class="line">    &lt;onfailure action&#x3D;&quot;restart&quot; delay&#x3D;&quot;60 sec&quot;&#x2F;&gt;</span><br><span class="line">    &lt;onfailure action&#x3D;&quot;restart&quot; delay&#x3D;&quot;120 sec&quot;&#x2F;&gt;</span><br><span class="line">    &lt;logmode&gt;reset&lt;&#x2F;logmode&gt;</span><br><span class="line">&lt;&#x2F;service&gt;</span><br></pre></td></tr></table></figure></div><p><strong>第二步</strong>，以管理员权限打开一个命令窗口，先进入到frp所在的目录，执行：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\winsw install</span><br><span class="line">.\winsw start</span><br></pre></td></tr></table></figure></div><p>如果要卸载服务，执行命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\winsw stop</span><br><span class="line">.\winsw uninstall</span><br></pre></td></tr></table></figure></div><p>如果顺利完成到此，你已经成功了。可以重启一下电脑，然后测试能否直接远程连接。</p><p>我远程连接的效果非常好，比那些花生壳等软件稳定多了，只要网速跟得上，体验效果还是很好的。</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10自带磁盘测速工具</title>
      <link href="/2020/01/29/win10%E8%87%AA%E5%B8%A6%E7%A3%81%E7%9B%98%E6%B5%8B%E9%80%9F%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/01/29/win10%E8%87%AA%E5%B8%A6%E7%A3%81%E7%9B%98%E6%B5%8B%E9%80%9F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p> win10自带磁盘测速工具，可以测量固态硬盘和机械硬盘的读写速度。下面介绍一下怎么使用。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ol><li>以管理员身份运行命令行程序，在搜索框输入【cmd】，右键点击出现【以管理员身份运行】.(否则在win10下面最终测试结果会一闪而过)<br><a href="https://img-blog.csdnimg.cn/20181203092231974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20181203092231974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2></li><li>输入命令<code>winsat disk</code>并回车，此时为默认扫描系统盘，一般也就是C盘<br><a href="https://img-blog.csdnimg.cn/20181203092706287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20181203092706287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2></li><li>输入<code>winsat disk -drive 盘符</code>,就是扫描指定盘了。<br>例如扫描D盘：<code>winsat disk -drive d</code><br><a href="https://img-blog.csdnimg.cn/20181203093831415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20181203093831415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIVVFJVVNISTEyMw==,size_16,color_FFFFFF,t_70" class="lazyload" title="在这里插入图片描述"></a></li></ol>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04安装指定版本g++,gcc</title>
      <link href="/2020/01/29/ubuntu16-04%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACg-gcc/"/>
      <url>/2020/01/29/ubuntu16-04%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACg-gcc/</url>
      
        <content type="html"><![CDATA[<ol><li>查看ubuntu系统上g++的版本：</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &#x2F;usr&#x2F;bin&#x2F;g++*</span><br></pre></td></tr></table></figure></div><ol start="2"><li>安装新版gcc和g++</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-4.9 g++-4.9</span><br></pre></td></tr></table></figure></div><ol start="3"><li>切换不同版本<br>当ubuntu系统上安装了不同版本的gcc和g++，可以使用update-alternatives命令设置默认使用哪个版本，典型的如在Ubuntu 16.04里安装了gcc-4.8和gcc-6, 想让gcc命令自动使用gcc-6版.首先要让系统知道我们安装了多个版本的gcc</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 命令最后的 20和50是优先级，如果使用auto选择模式，系统将默认使用优先级高的</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-4.8 20</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-6 50</span><br></pre></td></tr></table></figure></div><p>同理修改g++的方式类似：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-4.8 20</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-6 50</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
